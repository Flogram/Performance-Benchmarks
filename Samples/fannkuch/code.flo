fn printPermutation(p: Array{I32}):
    foreach i in p:
        draw(i, " ")
    draw("\n")

fn flipCount(p: Array{I32}) -> (f: I32):
    mut flips := 0
    while !=(p[0], 1):
        k := p[0]
        mut i := 0
        loop:
            if >=(i, /(k, 2)):
                break
            temp := p[i]
            p[i] = p[-(k, -(i, 1))]
            p[-(k, -(i, 1))] = temp
            i = +(i, 1)
        flips = +(flips, 1)
    return flips

fn fannkuch(n: I32):
    mut maxFlipsCount := 0
    mut printCount := 0
    permutations := [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

    foreach p in permutations:
        flips := flipCount(p)
        if >(flips, maxFlipsCount):
            maxFlipsCount = flips
        if <(printCount, 30):
            printPermutation(p)
            printCount = +(printCount, 1)

    draw("Max Flips: ", maxFlipsCount)

fn main():
    fannkuch(3)
