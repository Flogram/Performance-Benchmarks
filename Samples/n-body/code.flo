object Vector3D:
    x: FP64
    y: FP64
    z: FP64

object Body:
    position: Vector3D
    velocity: Vector3D
    mass: FP64

fn range(n: I32) -> (r: Array{I32}):
    r : Array{I32}(size = n) = Array{I32}(size = n)
    mut i := 1
    loop:
        if ==(-(i, -1), n):
            break
        r[-(i, 1)] = i
        i = +(i, 1)
    return r

fn sqrt(S: FP64) -> (root: FP64):
    epsilon : FP64 = 0.00001
    mut x := S
    loop:
        next_x := *(FP64(0.5), /(+(x,S), x))
        mut x_choice := -(next_x, x)
        if <(x_choice, 0):
            x_choice = -(x_choice, 1)
        if <(x_choice, epsilon):
            break
        x = next_x
    return x

fn add2Bodies(b1: Body, b2: Body) -> (s: Body):
    return Body(mass= +(b1.mass, b2.mass), position= Vector3D(x= +(b1.position.x,b2.position.x), y= +(b1.position.y, b2.position.y), z=+(b1.position.z,b2.position.z)), velocity= Vector3D(x= +(b1.velocity.x, b2.velocity.x), y= +(b1.velocity.y, b2.velocity.y), z= +(b1.velocity.z, b2.velocity.z)))

fn +(v1: Vector3D, v2: Vector3D) -> (v: Vector3D):
    return Vector3D(x= +(v1.x, v2.x), y= +(v1.y, v2.y), z= +(v1.z, v2.z))

fn -(v1: Vector3D, v2: Vector3D) -> (v: Vector3D):
    return Vector3D(x= -(v1.x, v2.x), y= -(v1.y, v2.y), z= -(v1.z, v2.z))

fn v_plus_scalar(v: Vector3D, s: FP64) -> (s: Vector3D):
    return Vector3D(x= +(v.x, s),y= +(v.y, s), z= +(v.z, s))

fn v_with_scalar(v: Vector3D, s: FP64) -> (p: Vector3D):
    return Vector3D(x= *(v.x, s),y= *(v.y, s), z= *(v.z, s))

fn v_over_scalar(v: Vector3D, s: FP64) -> (q: Vector3D):
    return Vector3D(x= /(v.x, s),y= /(v.y, s), z= /(v.z, s))

fn calculateForce(body1: Body, body2: Body) -> (force: Vector3D):
    G : FP64 = 667430000000
    x_Diff := -(body2.position.x, body1.position.x)
    y_Diff := -(body2.position.y, body1.position.y)
    z_Diff := -(body2.position.z, body1.position.z)
    distance := sqrt(+(+(*(x_Diff, x_Diff), *(y_Diff, y_Diff)), *(z_Diff, z_Diff)))
    forceMagnitude := /(*(G, *(body1.mass, body2.mass)), *(distance, distance))
    direction := v_over_scalar(-(body2.position, body1.position), distance)
    force := v_with_scalar(direction, forceMagnitude)
    return force

fn updateVelocity(mut body: Body, force: Vector3D, deltaTime: FP64):
    acceleration := v_over_scalar(force, body.mass)
    body.velocity = +(body.velocity, v_with_scalar(acceleration, deltaTime))

fn updatePosition(mut body: Body, deltaTime: FP64):
    body.position = +(body.position, v_with_scalar(body.velocity, deltaTime))

fn main():
    deltaTime := 0.001
    numSteps := 1000
    bodies := [Body(mass= 198900, position= Vector3D(x= 0, y= 0, z= 0), velocity= Vector3D(x= 0, y= 0, z= 0)), Body(mass= 5972000, position= Vector3D(x= 14960, y= 0, z= 0), velocity= Vector3D(x= 0, y= 29780, z= 0))]

    foreach step in range(numSteps):
        forces : Array{Vector3D}(size = size(bodies)) = []
        foreach i in range(size(bodies)):
            forces[i] = Vector3D(x= 0, y= 0, z= 0)

        # Calculate forces between all pairs of bodies
        foreach i in range(size(bodies)):
            foreach j in range(size(bodies)):
                if !=(i, j):
                    force := calculateForce(bodies[i], bodies[j])
                    forces[i] = +(forces[i], force)
        foreach i in range(size(bodies)):
            updateVelocity(bodies[i], forces[i], deltaTime)
            updatePosition(bodies[i], deltaTime)



